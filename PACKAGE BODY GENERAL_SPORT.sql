CREATE OR REPLACE PACKAGE BODY GENERAL_SPORT
AS  
    FUNCTION CUSTOMER_DATA(P_CUSTOMER_ID NUMBER)
    RETURN CUSTOMER % ROWTYPE
    AS 
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
        L_CUSTOMER      CUSTOMER % ROWTYPE;
    BEGIN 
        SELECT * 
        INTO L_CUSTOMER
        FROM CUSTOMER
        WHERE CUSTOMER_ID = P_CUSTOMER_ID; 
        
        
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, CUSTOMER_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA', SYSDATE, P_CUSTOMER_ID, USER);
        
        RETURN L_CUSTOMER;
        
    EXCEPTION
        WHEN OTHERS THEN 
            L_ERROR_CODE   := SQLCODE;
            L_ERROR_DETAILS := SQLERRM;
            INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
            VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER', 'FALSE');
                    
            INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, CUSTOMER_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
            VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM CUSTOMER', SYSDATE, P_CUSTOMER_ID,L_ERROR_CODE, L_ERROR_DETAILS, USER);
            RETURN NULL;
    END;
    
    FUNCTION COACH_DATA(P_COACH_ID NUMBER)
    RETURN COACH % ROWTYPE
    AS 
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
        L_COACH         COACH % ROWTYPE;
    BEGIN 
        SELECT * 
        INTO L_COACH
        FROM COACH
        WHERE COACH_ID = P_COACH_ID; 
       
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'COACH', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, COACH_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM COACH', SYSDATE, P_COACH_ID, USER);

        RETURN L_COACH;
        
    EXCEPTION
        WHEN OTHERS THEN 
            L_ERROR_CODE   := SQLCODE;
            L_ERROR_DETAILS := SQLERRM;
            INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
            VALUES         (LOG_SEQ.NEXTVAL, 'COACH', 'FALSE');
                    
            INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, COACH_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
            VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM COACH', SYSDATE, P_COACH_ID,L_ERROR_CODE, L_ERROR_DETAILS, USER);
            RETURN NULL;
    END;

    FUNCTION CUSTOMER_DETAILS_DATA(P_CUSTOMER_CODE VARCHAR2)
    RETURN CUSTOMER_DETAILS % ROWTYPE
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);    
        L_CUSTOMER_DETAILS CUSTOMER_DETAILS % ROWTYPE;
    BEGIN 
        SELECT * 
        INTO L_CUSTOMER_DETAILS
        FROM CUSTOMER_DETAILS
        WHERE CUSTOMER_CODE = P_CUSTOMER_CODE; 
        
        
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_DETAILS', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, CUSTOMER_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM CUSTOMER_DETAILS', SYSDATE, SUBSTR(P_CUSTOMER_CODE, 4), USER);

        RETURN L_CUSTOMER_DETAILS;
        
    EXCEPTION
        WHEN OTHERS THEN 
            L_ERROR_CODE   := SQLCODE;
            L_ERROR_DETAILS := SQLERRM;
            INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
            VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_DETAILS', 'FALSE');
                    
            INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, CUSTOMER_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
            VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM CUSTOMER_DETAILS', SYSDATE, SUBSTR(P_CUSTOMER_CODE, 4),L_ERROR_CODE, L_ERROR_DETAILS, USER);
            
            RETURN NULL;
    END; 
    
    FUNCTION COACH_DETAILS_DATA(P_COACH_CODE VARCHAR2)
    RETURN COACH_DETAILS % ROWTYPE
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100); 
        L_COACH_DETAILS COACH_DETAILS % ROWTYPE;
    BEGIN 
        SELECT * 
        INTO L_COACH_DETAILS
        FROM COACH_DETAILS
        WHERE COACH_CODE = P_COACH_CODE; 
        
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'COACH_DETAILS', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, COACH_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM COACH_DETAILS', SYSDATE, SUBSTR(P_COACH_CODE, 5), USER);

        RETURN L_COACH_DETAILS;
       
    EXCEPTION
        WHEN OTHERS THEN 
            L_ERROR_CODE   := SQLCODE;
            L_ERROR_DETAILS := SQLERRM;
            INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
            VALUES         (LOG_SEQ.NEXTVAL, 'COACH_DETAILS', 'FALSE');
                    
            INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, COACH_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
            VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM COACH_DETAILS', SYSDATE, SUBSTR(P_COACH_CODE, 5),L_ERROR_CODE, L_ERROR_DETAILS, USER);
            RETURN NULL;
    END;     
    
    FUNCTION SPORT_DATA(P_SPORT_ID NUMBER)
    RETURN SPORT % ROWTYPE
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100); 
        L_SPORT SPORT % ROWTYPE;
    BEGIN 
        SELECT * 
        INTO L_SPORT
        FROM SPORT
        WHERE SPORT_ID = P_SPORT_ID; 

        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'SPORT', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, SPORT_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM SPORT', SYSDATE,P_SPORT_ID, USER);

        RETURN L_SPORT;
    EXCEPTION
        WHEN OTHERS THEN 
            L_ERROR_CODE   := SQLCODE;
            L_ERROR_DETAILS := SQLERRM;
            INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
            VALUES         (LOG_SEQ.NEXTVAL, 'SPORT', 'FALSE');
                    
            INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, SPORT_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
            VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM SPORT', SYSDATE, P_SPORT_ID,L_ERROR_CODE, L_ERROR_DETAILS, USER);
            RETURN NULL;
    END;  
    
    FUNCTION LOCATION_DATA(P_LOCATION_ID NUMBER)
    RETURN LOCATION % ROWTYPE
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100); 
        L_LOCATION LOCATION % ROWTYPE;
    BEGIN 
        SELECT * 
        INTO L_LOCATION
        FROM LOCATION
        WHERE LOCATION_ID = P_LOCATION_ID; 

        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'LOCATION', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, LOCATION_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM LOCATION', SYSDATE, P_LOCATION_ID, USER);

        RETURN L_LOCATION;
    EXCEPTION
        WHEN OTHERS THEN 
            L_ERROR_CODE   := SQLCODE;
            L_ERROR_DETAILS := SQLERRM;
            INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
            VALUES         (LOG_SEQ.NEXTVAL, 'LOCATION', 'FALSE');
                    
            INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, LOCATION_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
            VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM LOCATION', SYSDATE, P_LOCATION_ID,L_ERROR_CODE, L_ERROR_DETAILS, USER);
            RETURN NULL;
    END; 
    
    FUNCTION PROMOTION_DATA(P_PROMOTION_ID NUMBER)
    RETURN PROMOTION % ROWTYPE
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100); 
        L_PROMOTION PROMOTION % ROWTYPE;
    BEGIN 
        SELECT * 
        INTO L_PROMOTION
        FROM PROMOTION
        WHERE PROMOTION_ID = P_PROMOTION_ID; 
        
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'PROMOTION', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, PROMOTION_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM PROMOTION', SYSDATE, P_PROMOTION_ID, USER);

        RETURN L_PROMOTION;
    EXCEPTION
        WHEN OTHERS THEN 
            L_ERROR_CODE   := SQLCODE;
            L_ERROR_DETAILS := SQLERRM;
            INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
            VALUES         (LOG_SEQ.NEXTVAL, 'PROMOTION', 'FALSE');
                    
            INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, PROMOTION_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
            VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM PROMOTION', SYSDATE, P_PROMOTION_ID,L_ERROR_CODE, L_ERROR_DETAILS, USER);
            RETURN NULL;
    END;
    
    FUNCTION CHARGE_DATA(P_SPORT_ID NUMBER)
    RETURN CHARGE % ROWTYPE
    AS
        L_CHARGE CHARGE % ROWTYPE;
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100); 
    BEGIN 
        SELECT * 
        INTO L_CHARGE
        FROM CHARGE
        WHERE SPORT_ID = P_SPORT_ID; 
        
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'CHARGE', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, SPORT_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM CHARGE', SYSDATE, P_SPORT_ID, USER);

        RETURN L_CHARGE;
    EXCEPTION
        WHEN OTHERS THEN 
            L_ERROR_CODE   := SQLCODE;
            L_ERROR_DETAILS := SQLERRM;
            INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
            VALUES         (LOG_SEQ.NEXTVAL, 'CHARGE', 'FALSE');
                    
            INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, SPORT_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
            VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM CHARGE', SYSDATE, P_SPORT_ID,L_ERROR_CODE, L_ERROR_DETAILS, USER);
            RETURN NULL;
    END; 
    
    FUNCTION CUSTOMER_SPORT_DATA(P_CUSTOMER_SPORT_ID NUMBER)
    RETURN CUSTOMER_SPORT % ROWTYPE
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100); 
        L_CUSTOMER_SPORT CUSTOMER_SPORT % ROWTYPE;
    BEGIN 
        SELECT * 
        INTO L_CUSTOMER_SPORT
        FROM CUSTOMER_SPORT
        WHERE CUSTOMER_SPORT_ID = P_CUSTOMER_SPORT_ID; 
        
       INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
       VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_SPORT', 'TRUE');
                    
       INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, BY_USER, CUSTOMER_SPORT_ID)
       VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM CUSTOMER_SPORT', SYSDATE, USER, P_CUSTOMER_SPORT_ID);

       
        RETURN L_CUSTOMER_SPORT;
    EXCEPTION
        WHEN OTHERS THEN 
            L_ERROR_CODE   := SQLCODE;
            L_ERROR_DETAILS := SQLERRM;
            INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
            VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_SPORT', 'FALSE');
                    
            INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, ERROR_CODE, ERROR_DETAILS, BY_USER, CUSTOMER_SPORT_ID)
            VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM CUSTOMER_SPORT', SYSDATE,L_ERROR_CODE, L_ERROR_DETAILS, USER, P_CUSTOMER_SPORT_ID);
           RETURN NULL;
    END;
    
    FUNCTION CUSTOMER_SPORT_DETAILS_DATA(P_CUSTOMER_SPORT_CODE VARCHAR2)
    RETURN CUSTOMER_SPORT_DETAILS % ROWTYPE
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100); 
        L_CUSTOMER_SPORT_DETAILS CUSTOMER_SPORT_DETAILS % ROWTYPE;
    BEGIN 
        SELECT * 
        INTO L_CUSTOMER_SPORT_DETAILS
        FROM CUSTOMER_SPORT_DETAILS
        WHERE CUSTOMER_SPORT_CODE = P_CUSTOMER_SPORT_CODE; 
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_SPORT_DETAILS', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, BY_USER, CUSTOMER_SPORT_ID)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM CUSTOMER_SPORT_DETAILS', SYSDATE, USER, SUBSTR(P_CUSTOMER_SPORT_CODE, 5));

       
        RETURN L_CUSTOMER_SPORT_DETAILS;
    EXCEPTION
        WHEN OTHERS THEN 
            L_ERROR_CODE   := SQLCODE;
            L_ERROR_DETAILS := SQLERRM;
            INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
            VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_SPORT_DETAILS', 'FALSE');
                    
            INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, ERROR_CODE, ERROR_DETAILS, BY_USER, CUSTOMER_SPORT_ID)
            VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM CUSTOMER_SPORT_DETAILS', SYSDATE,L_ERROR_CODE, L_ERROR_DETAILS, USER, SUBSTR(P_CUSTOMER_SPORT_CODE, 5));
           RETURN NULL;
    END;                      
        
    
    FUNCTION INVOICE_DETAILS_DATA(P_INVOICE_DETAILS_CODE VARCHAR2)
    RETURN INVOICE_DETAILS % ROWTYPE
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100); 
        L_INVOICE_DETAILS INVOICE_DETAILS % ROWTYPE;
    BEGIN 
        SELECT * 
        INTO L_INVOICE_DETAILS
        FROM INVOICE_DETAILS
        WHERE INVOICE_CODE = P_INVOICE_DETAILS_CODE; 
       
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'INVOICE_DETAILS', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, INVOICE_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM INVOICE_DETAILS', SYSDATE, SUBSTR(P_INVOICE_DETAILS_CODE, 5), USER);

        RETURN L_INVOICE_DETAILS;
    EXCEPTION
        WHEN OTHERS THEN 
            L_ERROR_CODE   := SQLCODE;
            L_ERROR_DETAILS := SQLERRM;
            INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
            VALUES         (LOG_SEQ.NEXTVAL, 'INVOICE_DETAILS', 'FALSE');
                    
            INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, INVOICE_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
            VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM INVOICE_DETAILS', SYSDATE, SUBSTR(P_INVOICE_DETAILS_CODE, 5), L_ERROR_CODE, L_ERROR_DETAILS, USER);
           RETURN NULL;
    END; 
    
    FUNCTION INVOICE_DATA(P_INVOICE_ID NUMBER)
    RETURN INVOICE % ROWTYPE
    AS 
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);     
        L_INVOICE INVOICE % ROWTYPE;
    BEGIN 
        SELECT * 
        INTO L_INVOICE
        FROM INVOICE
        WHERE INVOICE_ID = P_INVOICE_ID;
      
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'INVOICE', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, INVOICE_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM INVOICE', SYSDATE, P_INVOICE_ID, USER);
 
        RETURN L_INVOICE;
    EXCEPTION
        WHEN OTHERS THEN 
            L_ERROR_CODE   := SQLCODE;
            L_ERROR_DETAILS := SQLERRM;
            INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
            VALUES         (LOG_SEQ.NEXTVAL, 'INVOICE', 'FALSE');
                    
            INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, INVOICE_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
            VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'GET DATA FROM INVOICE', SYSDATE, P_INVOICE_ID, L_ERROR_CODE, L_ERROR_DETAILS, USER);
           RETURN NULL;
    END; 
    
    
    PROCEDURE CUSTOMER_ENTER(P_CUSTOMER_ID    NUMBER,
                             P_CUSTOMER_NAME  VARCHAR2,
                             P_CUSTOMER_PHONE VARCHAR2,
                             P_IF_INVALID     VARCHAR2
                             )
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
        
    BEGIN 
        INSERT INTO CUSTOMER (CUSTOMER_ID, CUSTOMER_NAME, CUSTOMER_PHONE, IF_INVALID)
        VALUES               (P_CUSTOMER_ID, P_CUSTOMER_NAME, P_CUSTOMER_PHONE, P_IF_INVALID);

        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, CUSTOMER_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO CUSTOMER', SYSDATE, P_CUSTOMER_ID, USER);
 
    EXCEPTION
        WHEN OTHERS THEN 
            L_ERROR_CODE   := SQLCODE;
            L_ERROR_DETAILS := SQLERRM;
            INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
            VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER', 'FALSE');
                    
            INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, CUSTOMER_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
            VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO CUSTOMER', SYSDATE, P_CUSTOMER_ID, L_ERROR_CODE, L_ERROR_DETAILS, USER);
           
    END;
    
    PROCEDURE CUSTOMER_DETAILS_ENTER(P_CUSTOMER_CODE     VARCHAR2,
                                     P_BIRTH_DAY         DATE,
                                     P_GENDER            VARCHAR2,
                                     P_CREATING_DATE     DATE,
                                     P_LOCATION_ID       NUMBER,
                                     P_CUSTOMER_PRO_CODE VARCHAR2
                                     )
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
       
    BEGIN
        INSERT INTO CUSTOMER_DETAILS (CUSTOMER_CODE, BIRTH_DATE, GENDER, CREATING_DATE, LOCATION_ID, CUSTOMER_PRO_CODE)
        VALUES                       (P_CUSTOMER_CODE, P_BIRTH_DAY, P_GENDER, P_CREATING_DATE, P_LOCATION_ID, P_CUSTOMER_PRO_CODE);   
        
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_DETAILS', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, CUSTOMER_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO CUSTOMER_DETAILS', SYSDATE, SUBSTR(P_CUSTOMER_CODE, 4), USER);
 
    EXCEPTION
            WHEN OTHERS THEN 
            L_ERROR_CODE   := SQLCODE;
            L_ERROR_DETAILS := SQLERRM;
            INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
            VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_DETAILS', 'FALSE');
                    
            INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, CUSTOMER_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
            VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO CUSTOMER_DETAILS', SYSDATE, SUBSTR(P_CUSTOMER_CODE, 4), L_ERROR_CODE, L_ERROR_DETAILS, USER);
    END;
    
    PROCEDURE COACH_ENTER(P_COACH_ID   NUMBER,
                          P_COACH_NAME VARCHAR2,
                          P_IF_INVALID VARCHAR2
                          )
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
    BEGIN 
        INSERT INTO COACH (COACH_ID, COACH_NAME, IF_INVALID)
        VALUES            (P_COACH_ID, P_COACH_NAME, P_IF_INVALID);    
          
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'COACH', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, COACH_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO COACH', SYSDATE, P_COACH_ID, USER);
 
    EXCEPTION
            WHEN OTHERS THEN 
                L_ERROR_CODE   := SQLCODE;
                L_ERROR_DETAILS := SQLERRM;
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'COACH', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, COACH_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO COACH', SYSDATE, P_COACH_ID, L_ERROR_CODE, L_ERROR_DETAILS, USER);
     END;
    
    PROCEDURE COACH_DETAILS_ENTER(P_COACH_CODE    VARCHAR2,
                                  P_STARTING_HOUR NUMBER,
                                  P_ENDING_HOUR   NUMBER,
                                  P_SPORT_ID      NUMBER
                                  )
    AS
        L_ENDING_HOUR NUMBER;
        L_SQLERRM     VARCHAR2(100);
        L_SQLCODE     NUMBER;
    BEGIN
        IF P_STARTING_HOUR > P_ENDING_HOUR OR P_STARTING_HOUR = P_ENDING_HOUR
        THEN 
                RAISE ERROR_PKG.STARTING_BEFORE_ENDING;
        END IF;
        INSERT INTO COACH_DETAILS (COACH_CODE, STARTING_HOUR, ENDING_HOUR, SPORT_ID)
        VALUES                    (P_COACH_CODE, P_STARTING_HOUR, P_ENDING_HOUR, P_SPORT_ID);  
        
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES          (LOG_SEQ.NEXTVAL, 'COACH_DETAILS', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, COACH_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'INSERTING', SYSDATE, SUBSTR(P_COACH_CODE, 5), USER);
          
    EXCEPTION
            WHEN ERROR_PKG.STARTING_BEFORE_ENDING THEN
                    L_ENDING_HOUR := P_ENDING_HOUR;
                    L_ENDING_HOUR := L_ENDING_HOUR + 12;
                    INSERT INTO COACH_DETAILS (COACH_CODE, STARTING_HOUR, ENDING_HOUR, SPORT_ID)
                    VALUES                    (P_COACH_CODE, P_STARTING_HOUR, L_ENDING_HOUR, P_SPORT_ID);    
                    
                    INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                    VALUES          (LOG_SEQ.NEXTVAL, 'COACH_DETAILS', 'TRUE');
                    
                    INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, COACH_ID, BY_USER)
                    VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'INSERTING', SYSDATE, SUBSTR(P_COACH_CODE, 5), USER);

            WHEN OTHERS THEN 
                    INSERT INTO LOG (LOG_ID, TABLE_NAME, IF_SUCCESSFUL)
                    VALUES          (LOG_SEQ.NEXTVAL, 'COACH_DETAILS', 'FALSE');
                    L_SQLERRM:= SQLERRM;
                    L_SQLCODE := SQLCODE;
                    INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, COACH_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
                    VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'INSERTING', SYSDATE, SUBSTR(P_COACH_CODE, 5), L_SQLCODE, L_SQLERRM, USER);
                    
    END;    
    
    PROCEDURE CHARGE_ENTER(P_CHARGE_ID    NUMBER,
                           P_SPORT_ID     NUMBER,
                           P_CAHRGE_YEAR  NUMBER,
                           P_CHARGE_MONTH NUMBER,
                           P_IF_INVALID   VARCHAR2
                           )
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
    BEGIN 
        INSERT INTO CHARGE (CHARGE_ID, SPORT_ID, CHARGE_YEAR, CHARGE_MONTH, IF_INVALID)
        VALUES             (P_CHARGE_ID, P_SPORT_ID, P_CAHRGE_YEAR, P_CHARGE_MONTH, P_IF_INVALID);      
    
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'CHARGE', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, BY_USER, CHARGE_ID)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO CHARGE', SYSDATE, USER, P_CHARGE_ID);
 
     EXCEPTION 
            WHEN OTHERS THEN 
                L_ERROR_CODE   := SQLCODE;
                L_ERROR_DETAILS := SQLERRM;
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'CHARGE', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, ERROR_CODE, ERROR_DETAILS, BY_USER, CHARGE_ID)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO CHARGE', SYSDATE, L_ERROR_CODE, L_ERROR_DETAILS, USER, P_CHARGE_ID);
     END;  
    PROCEDURE CUSTOMER_SPORT_ENTER(P_CUSTOMER_SPORT_ID    NUMBER,
                                   P_CUSTOMER_NAME        VARCHAR2,
                                   P_SPORT_NAME_ONE       VARCHAR2,
                                   P_COACH_NAME_ONE       VARCHAR2,
                                   P_SPORT_NAME_TWO       VARCHAR2,
                                   P_COACH_NAME_TWO       VARCHAR2,
                                   P_IF_INVALID           VARCHAR2
                                   )
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
    BEGIN
        IF P_SPORT_NAME_ONE = P_SPORT_NAME_TWO 
        THEN 
                RAISE ERROR_PKG.ONE_TWO_EQUAL;
        END IF;
        INSERT INTO CUSTOMER_SPORT (CUSTOMER_SPORT_ID, CUSTOMER_NAME, SPORT_NAME_ONE, COACH_NAME_ONE, 
                                    SPORT_NAME_TWO, COACH_NAME_TWO, IF_INVALID)
        VALUES                     (P_CUSTOMER_SPORT_ID, P_CUSTOMER_NAME, P_SPORT_NAME_ONE, P_COACH_NAME_ONE, 
                                    P_SPORT_NAME_TWO, P_COACH_NAME_TWO, P_IF_INVALID);        
    
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_SPORT', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, BY_USER, CUSTOMER_SPORT_ID)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO CUSTOMER_SPORT', SYSDATE, USER, P_CUSTOMER_SPORT_ID);
 
     EXCEPTION 
            WHEN ERROR_PKG.ONE_TWO_EQUAL THEN 
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_SPORT', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, ERROR_CODE, ERROR_DETAILS, BY_USER, CUSTOMER_SPORT_ID)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO CUSTOMER_SPORT', SYSDATE, -20001, 'ONE AND TWO EQUAL', USER, P_CUSTOMER_SPORT_ID);
     
            WHEN OTHERS THEN 
                L_ERROR_CODE   := SQLCODE;
                L_ERROR_DETAILS := SQLERRM;
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_SPORT', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, ERROR_CODE, ERROR_DETAILS, BY_USER, CUSTOMER_SPORT_ID)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO CUSTOMER_SPORT', SYSDATE, L_ERROR_CODE, L_ERROR_DETAILS, USER, P_CUSTOMER_SPORT_ID);
     
    END;   
    

    PROCEDURE CUSTOMER_SPORT_DETAILS_ENTER(P_CUSTOMER_SPORT_CODE   VARCHAR2,
                                           P_CUSTOMER_ID           NUMBER, 
                                           P_STARTING_DATE_ONE     DATE,
                                           P_ENDING_DATE_ONE       DATE,
                                           P_STARTING_DATE_TWO     DATE,
                                           P_ENDING_DATE_TWO       DATE ,
                                           P_SPORT_HOUR_ONE        NUMBER,
                                           P_SPORT_HOUR_TWO        NUMBER,
                                           P_SPORT_ID_ONE          NUMBER,
                                           P_SPORT_ID_TWO          NUMBER,
                                           P_COACH_ID_ONE          NUMBER,
                                           P_COACH_ID_TWO          NUMBER,
                                           P_LAST_CHARGE_DATE_ONE  DATE,
                                           P_LAST_CHARGE_DATE_TWO  DATE
                                   )
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
    BEGIN 
        IF P_SPORT_HOUR_ONE = P_SPORT_HOUR_TWO OR  P_SPORT_ID_ONE = P_SPORT_ID_TWO
        THEN 
                RAISE ERROR_PKG.ONE_TWO_EQUAL;
        END IF;
        INSERT INTO CUSTOMER_SPORT_DETAILS (CUSTOMER_SPORT_CODE, CUSTOMER_ID, STARTING_DATE_ONE, ENDING_DATE_ONE, 
                                            STARTING_DATE_TWO, ENDING_DATE_TWO, SPORT_HOUR_ONE, SPORT_HOUR_TWO,
                                            SPORT_ID_ONE, SPORT_ID_TWO, COACH_ID_ONE, COACH_ID_TWO, LAST_CHARGE_DATE_ONE, 
                                            LAST_CHARGE_DATE_TWO)
        VALUES                             (P_CUSTOMER_SPORT_CODE, P_CUSTOMER_ID, P_STARTING_DATE_ONE, P_ENDING_DATE_ONE, 
                                            P_STARTING_DATE_TWO, P_ENDING_DATE_TWO, P_SPORT_HOUR_ONE, P_SPORT_HOUR_TWO,
                                            P_SPORT_ID_ONE, P_SPORT_ID_TWO, P_COACH_ID_ONE, P_COACH_ID_TWO, P_LAST_CHARGE_DATE_ONE, 
                                            P_LAST_CHARGE_DATE_TWO);  
                                            
                                                   
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_SPORT_DETAILS', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, BY_USER, CUSTOMER_SPORT_ID)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO CUSTOMER_SPORT_DETAILS', SYSDATE, USER, SUBSTR(P_CUSTOMER_SPORT_CODE, 5));
 
    EXCEPTION 
    
            WHEN ERROR_PKG.ONE_TWO_EQUAL THEN 
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_SPORT_DETAILS', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, ERROR_CODE, ERROR_DETAILS, BY_USER, CUSTOMER_SPORT_ID)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO CUSTOMER_SPORT_DETAILS', SYSDATE, -20001, 'ONE AND TWO EQUAL', USER, SUBSTR(P_CUSTOMER_SPORT_CODE, 5));
     
            WHEN OTHERS THEN 
                L_ERROR_CODE   := SQLCODE;
                L_ERROR_DETAILS := SQLERRM;
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_SPORT_DETAILS', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, ERROR_CODE, ERROR_DETAILS, BY_USER, CUSTOMER_SPORT_ID)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO CUSTOMER_SPORT_DETAILS', SYSDATE, L_ERROR_CODE, L_ERROR_DETAILS, USER, SUBSTR(P_CUSTOMER_SPORT_CODE, 5));
     
   
    END;
    

    PROCEDURE INVOICE_ENTER(P_INVOICE_ID                NUMBER, 
                            P_CUSTOMER_NAME             VARCHAR2,
                            P_SPORT_NAME_ONE            VARCHAR2, 
                            P_SPORT_NAME_TWO            VARCHAR2,
                            P_MONTH_COUNT_ONE           NUMBER,
                            P_MONTH_COUNT_TWO           NUMBER,
                            P_TOTAL_COST                NUMBER,
                            P_INVOICE_DATE              DATE,
                            P_TOTAL_COST_WITH_DISCOUNT  NUMBER
                            )
    AS 
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
    BEGIN 
        IF P_SPORT_NAME_ONE = P_SPORT_NAME_TWO 
        THEN 
                RAISE ERROR_PKG.ONE_TWO_EQUAL;
        END IF;
        INSERT INTO INVOICE (INVOICE_ID, CUSTOMER_NAME, SPORT_NAME_ONE, SPORT_NAME_TWO,
                             MONTH_COUNT_ONE, MONTH_COUNT_TWO, TOTAL_COST, INVOICE_DATE, TOTAL_COST_WITH_DISCOUNT)
        VALUES              (P_INVOICE_ID, P_CUSTOMER_NAME, P_SPORT_NAME_ONE, P_SPORT_NAME_TWO,
                             P_MONTH_COUNT_ONE, P_MONTH_COUNT_TWO, P_TOTAL_COST, P_INVOICE_DATE, P_TOTAL_COST_WITH_DISCOUNT);
    
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'INVOICE', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, INVOICE_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO INVOICE', SYSDATE, P_INVOICE_ID, USER);
 
    EXCEPTION 
    
            WHEN ERROR_PKG.ONE_TWO_EQUAL THEN 
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'INVOICE', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, INVOICE_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO INVOICE', SYSDATE, P_INVOICE_ID, L_ERROR_CODE, L_ERROR_DETAILS, USER);
     
            WHEN OTHERS THEN 
                L_ERROR_CODE   := SQLCODE;
                L_ERROR_DETAILS := SQLERRM;
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'INVOICE', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, INVOICE_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO INVOICE', SYSDATE, P_INVOICE_ID, L_ERROR_CODE, L_ERROR_DETAILS, USER);
     
    END;  
    
    PROCEDURE INVOICE_DETAILS_ENTER(P_INVOICE_CODE              VARCHAR2,  
                                    P_BANK_ACCOUNT              VARCHAR2,
                                    P_COST_SPORT_ONE            NUMBER,
                                    P_COST_SPORT_TWO            NUMBER,
                                    P_PROMO_CREATING_DATE       DATE,
                                    P_PROMO_STARTING_DATE       DATE,
                                    P_PROMO_ENDING_DATE         DATE, 
                                    P_EXPLAIN_INVOICE           VARCHAR2,
                                    P_PROMO_DISCOUNT_PERCENTAGE NUMBER)
    AS 
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
    BEGIN 
        INSERT INTO INVOICE_DETAILS (INVOICE_CODE,  
                                      BANK_ACCOUNT, COST_SPORT_ONE, COST_SPORT_TWO, PROMO_CREATING_DATE,
                                      PROMO_STARTING_DATE, PROMO_ENDING_DATE, EXPLAIN_INVOICE, PROMO_DISCOUNT_PERCENTAGE)
        VALUES                      (P_INVOICE_CODE, P_BANK_ACCOUNT, P_COST_SPORT_ONE, P_COST_SPORT_TWO,
                                     P_PROMO_CREATING_DATE, P_PROMO_STARTING_DATE, P_PROMO_ENDING_DATE, 
                                     P_EXPLAIN_INVOICE, P_PROMO_DISCOUNT_PERCENTAGE);
                                     
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'INVOICE_DETAILS', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, INVOICE_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO INVOICE_DETAILS', SYSDATE, SUBSTR(P_INVOICE_CODE, 5), USER);
 
    EXCEPTION 
            WHEN OTHERS THEN 
                L_ERROR_CODE   := SQLCODE;
                L_ERROR_DETAILS := SQLERRM;
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'INVOICE_DETAILS', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, INVOICE_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO INVOICE_DETAILS', SYSDATE, SUBSTR(P_INVOICE_CODE, 5), L_ERROR_CODE, L_ERROR_DETAILS, USER);
     
    
    END;      
      
    
    PROCEDURE LOCATION_ENTER(P_LOCATION_ID   NUMBER,
                             P_LOCATION_NAME VARCHAR2,
                             P_IF_INVALID    VARCHAR2
                             )
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
    BEGIN 
        INSERT INTO LOCATION     (LOCATION_ID,LOCATION_NAME, IF_INVALID)
        VALUES                   (P_LOCATION_ID,P_LOCATION_NAME, P_IF_INVALID);
        
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'LOCATION', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, LOCATION_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO LOCATION', SYSDATE, P_LOCATION_ID, USER);
 
    EXCEPTION 
            WHEN OTHERS THEN 
                L_ERROR_CODE   := SQLCODE;
                L_ERROR_DETAILS := SQLERRM;
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'LOCATION', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, LOCATION_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO LOCATION', SYSDATE, P_LOCATION_ID, L_ERROR_CODE, L_ERROR_DETAILS, USER);
     
   
    END;    
    
    PROCEDURE SPORT_ENTER   (P_SPORT_ID   NUMBER,
                             P_SPORT_NAME VARCHAR2,
                             P_IF_INVALID VARCHAR2
                             )
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
    BEGIN 
        INSERT INTO SPORT     (SPORT_ID,SPORT_NAME, IF_INVALID)
        VALUES                (P_SPORT_ID,P_SPORT_NAME, P_IF_INVALID);
      
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'SPORT', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, SPORT_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO SPORT', SYSDATE, P_SPORT_ID, USER);
 
    EXCEPTION 
            WHEN OTHERS THEN 
                L_ERROR_CODE   := SQLCODE;
                L_ERROR_DETAILS := SQLERRM;
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'SPORT', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, SPORT_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO SPORT', SYSDATE, P_SPORT_ID, L_ERROR_CODE, L_ERROR_DETAILS, USER);

    END;   
    
    PROCEDURE PROMOTION_ENTER(P_PROMOTION_ID        NUMBER,
                              P_PROMOTION_TYPE      VARCHAR2,
                              P_prOMOTION_CODE      VARCHAR2,
                              P_DISCOUNT_PERCENTAGE NUMBER,
                              P_IF_INVALID          VARCHAR2
                             )
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
    BEGIN 
        INSERT INTO PROMOTION   (PROMOTION_ID,  PROMOTION_TYPE, 
                                 PrOMOTION_CODE, DISCOUNT_PERCENTAGE, IF_INVALID)
        VALUES                  (P_PROMOTION_ID,  P_PROMOTION_TYPE, 
                                 P_PrOMOTION_CODE, P_DISCOUNT_PERCENTAGE, P_IF_INVALID);  
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'PROMOTION', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, PROMOTION_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO PROMOTION', SYSDATE, P_PROMOTION_ID, USER);
 
    EXCEPTION 
            WHEN OTHERS THEN 
                L_ERROR_CODE   := SQLCODE;
                L_ERROR_DETAILS := SQLERRM;
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'PROMOTION', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, PROMOTION_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'ENTER DATA TO PROMOTION', SYSDATE, P_PROMOTION_ID, L_ERROR_CODE, L_ERROR_DETAILS, USER);

                                           
    END;  
    
    FUNCTION FIND_PROMOTION (P_CUSTOMER_ID NUMBER)
    RETURN PROMOTION % ROWTYPE   
    AS 
    L_ERROR_CODE    NUMBER;
    L_ERROR_DETAILS VARCHAR2(100);
    L_CUSTOMER_DETAILS CUSTOMER_DETAILS % ROWTYPE;
    L_PROMOTION PROMOTION % ROWTYPE;
    BEGIN   
        L_CUSTOMER_DETAILS := GENERAL_SPORT.CUSTOMER_DETAILS_DATA('C00'||P_CUSTOMER_ID);
        CASE
        WHEN EXTRACT (MONTH FROM L_CUSTOMER_DETAILS.BIRTH_DATE) = EXTRACT (MONTH FROM SYSDATE ) 
                AND EXTRACT (DAY FROM L_CUSTOMER_DETAILS.BIRTH_DATE) = EXTRACT (DAY FROM SYSDATE) 
                THEN 
                        L_PROMOTION :=  GENERAL_SPORT.PROMOTION_DATA(1);
                        
        WHEN EXTRACT(YEAR FROM sysdate) - EXTRACT (YEAR FROM L_CUSTOMER_DETAILS.BIRTH_DATE) < 18 --CHILD           
                THEN
                        L_PROMOTION :=  GENERAL_SPORT.PROMOTION_DATA(3);
                        
        WHEN EXTRACT(YEAR FROM sysdate) - EXTRACT (YEAR FROM L_CUSTOMER_DETAILS.BIRTH_DATE) >= 65 --OLD           
                THEN
                        L_PROMOTION :=  GENERAL_SPORT.PROMOTION_DATA(2);
                        
        WHEN EXTRACT(YEAR FROM sysdate) - EXTRACT (YEAR FROM L_CUSTOMER_DETAILS.BIRTH_DATE) < 40 --YOUNG 
                AND EXTRACT(YEAR FROM sysdate) - EXTRACT (YEAR FROM L_CUSTOMER_DETAILS.BIRTH_DATE) >= 18          
                THEN
                        L_PROMOTION :=  GENERAL_SPORT.PROMOTION_DATA(4);
                        
        ELSE 
                        L_PROMOTION :=  GENERAL_SPORT.PROMOTION_DATA(5); --NORMAL

        END CASE;
        
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'PROMOTION', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, PROMOTION_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'FIND_PROMOTION FUNCTION', SYSDATE, L_PROMOTION.PROMOTION_ID, USER);
 
        RETURN L_PROMOTION;
        
    EXCEPTION
            WHEN OTHERS THEN 
                L_ERROR_CODE   := SQLCODE;
                L_ERROR_DETAILS := SQLERRM;
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'PROMOTION', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, PROMOTION_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'FIND_PROMOTION FUNCTION', SYSDATE, L_PROMOTION.PROMOTION_ID, L_ERROR_CODE, L_ERROR_DETAILS, USER);

                RETURN NULL;                            
       END; 
    
    PROCEDURE UPDATE_PROMOTION (P_CUSTOMER_ID NUMBER)
    AS
    L_PRMOTION PROMOTION % ROWTYPE;
    L_ERROR_CODE    NUMBER;
    L_ERROR_DETAILS VARCHAR2(100);
    BEGIN   
        L_PRMOTION := GENERAL_SPORT.FIND_PROMOTION(P_CUSTOMER_ID);
        DBMS_OUTPUT.PUT_LINE(L_PRMOTION.PROMOTION_CODE);
        UPDATE CUSTOMER_DETAILS
        SET CUSTOMER_PRO_CODE = L_PRMOTION.PROMOTION_CODE
        WHERE CUSTOMER_CODE = 'C00' || P_CUSTOMER_ID;
        
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, CUSTOMER_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'UPDATE_PROMOTION PROCEDURE', SYSDATE, P_CUSTOMER_ID, USER);
 
    EXCEPTION
        WHEN OTHERS THEN 
                L_ERROR_CODE   := SQLCODE;
                L_ERROR_DETAILS := SQLERRM;
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, CUSTOMER_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'UPDATE_PROMOTION PROCEDURE', SYSDATE, P_CUSTOMER_ID, L_ERROR_CODE, L_ERROR_DETAILS, USER);
    END;   
    
    FUNCTION COMPUTE_INVOICE (P_CUSTOMER_SPORT_ID IN NUMBER, P_CUSTOMER_ID IN NUMBER)
    RETURN INVOICE % ROWTYPE
    AS 
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
        L_CUSTOMER_SPORT CUSTOMER_SPORT % ROWTYPE;
        L_CUSTOMER_SPORT_DETAILS CUSTOMER_SPORT_DETAILS % ROWTYPE;
        L_CHARGE CHARGE % ROWTYPE;
        SPORT_ID_N NUMBER;
        L_SPORT SPORT % ROWTYPE;
        L_INVOICE INVOICE % ROWTYPE;
        COST_ONE NUMBER;
        L_PROMOTION PROMOTION % ROWTYPE;
        COST_TWO NUMBER;
    BEGIN 
        L_CUSTOMER_SPORT           := GENERAL_SPORT.CUSTOMER_SPORT_DATA(P_CUSTOMER_SPORT_ID);
        L_INVOICE.CUSTOMER_NAME    := L_CUSTOMER_SPORT.CUSTOMER_NAME;
        L_INVOICE.SPORT_NAME_ONE   := L_CUSTOMER_SPORT.SPORT_NAME_ONE;
        L_PROMOTION                := GENERAL_SPORT.FIND_PROMOTION(P_CUSTOMER_ID);
        L_CUSTOMER_SPORT_DETAILS   := GENERAL_SPORT.CUSTOMER_SPORT_DETAILS_DATA('CS00'||P_CUSTOMER_SPORT_ID);
        L_INVOICE.MONTH_COUNT_ONE  := MONTHS_BETWEEN(L_CUSTOMER_SPORT_DETAILS.ENDING_DATE_ONE,L_CUSTOMER_SPORT_DETAILS.STARTING_DATE_ONE);
        SELECT SPORT_ID 
        INTO SPORT_ID_N 
        FROM SPORT
        WHERE SPORT_NAME = L_INVOICE.SPORT_NAME_ONE;
        L_SPORT.SPORT_ID := SPORT_ID_N;
        L_CHARGE         := GENERAL_SPORT.CHARGE_DATA(L_SPORT.SPORT_ID);
        IF L_INVOICE.MONTH_COUNT_ONE < 12 
        THEN 
                COST_ONE:= L_CHARGE.CHARGE_MONTH * L_INVOICE.MONTH_COUNT_ONE;
        ELSE 
                COST_ONE:= L_CHARGE.CHARGE_YEAR * L_INVOICE.MONTH_COUNT_ONE/12;
        END IF;
        L_INVOICE.TOTAL_COST   := COST_ONE;
        L_INVOICE.INVOICE_DATE := SYSDATE;
        L_INVOICE.TOTAL_COST_WITH_DISCOUNT := L_INVOICE.TOTAL_COST - (COST_ONE * L_PROMOTION.DISCOUNT_PERCENTAGE);
        
        IF L_CUSTOMER_SPORT.SPORT_NAME_TWO IS NOT NULL --IF THERE TWO SPORT
        THEN 
                L_INVOICE.SPORT_NAME_TWO   := L_CUSTOMER_SPORT.SPORT_NAME_TWO;
                L_INVOICE.MONTH_COUNT_TWO  := MONTHS_BETWEEN(L_CUSTOMER_SPORT_DETAILS.ENDING_DATE_TWO,L_CUSTOMER_SPORT_DETAILS.STARTING_DATE_TWO);
                SELECT SPORT_ID 
                INTO SPORT_ID_N 
                FROM SPORT
                WHERE SPORT_NAME = L_INVOICE.SPORT_NAME_TWO;
                L_SPORT.SPORT_ID := SPORT_ID_N;
                L_CHARGE         := GENERAL_SPORT.CHARGE_DATA(L_SPORT.SPORT_ID);
                
                IF L_INVOICE.MONTH_COUNT_TWO < 12 
                THEN 
                COST_TWO:= L_CHARGE.CHARGE_MONTH * L_INVOICE.MONTH_COUNT_TWO;
                ELSE 
                COST_TWO:= L_CHARGE.CHARGE_YEAR * L_INVOICE.MONTH_COUNT_TWO/12;
                END IF;
                L_INVOICE.TOTAL_COST   := COST_ONE + COST_TWO;
                L_INVOICE.INVOICE_DATE := SYSDATE;
                L_INVOICE.TOTAL_COST_WITH_DISCOUNT := L_INVOICE.TOTAL_COST - (L_INVOICE.TOTAL_COST * L_PROMOTION.DISCOUNT_PERCENTAGE);
        END IF;
        
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'INVOICE', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, INVOICE_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'COMPUTE_INVOICE FUNCTION', SYSDATE, L_INVOICE.INVOICE_ID, USER);
 
        RETURN L_INVOICE;
     
    EXCEPTION
        WHEN OTHERS THEN 
                L_ERROR_CODE   := SQLCODE;
                L_ERROR_DETAILS := SQLERRM;
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'INVOICE', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, INVOICE_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'COMPUTE_INVOICE FUNCTION', SYSDATE, L_INVOICE.INVOICE_ID, L_ERROR_CODE, L_ERROR_DETAILS, USER);
                RETURN NULL;
    
    END;
    
    FUNCTION COMPUTE_INVOICE_DETAILS (P_INVOICE_ID NUMBER, P_CUSTOMER_SPORT_ID NUMBER, P_CUSTOMER_ID NUMBER)
    RETURN INVOICE_DETAILS % ROWTYPE
    AS
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
        L_CUSTOMER_SPORT_DETAILS CUSTOMER_SPORT_DETAILS % ROWTYPE;
        L_INVOICE INVOICE % ROWTYPE;
        L_INVOICE_DETAILS  INVOICE_DETAILS % ROWTYPE;
        L_CHARGE CHARGE % ROWTYPE;
        L_PROMOTION PROMOTION %ROWTYPE;
        L_SPORT_ID NUMBER;
    BEGIN 
        L_INVOICE                      := GENERAL_SPORT.INVOICE_DATA(P_INVOICE_ID); 
        L_CUSTOMER_SPORT_DETAILS       := GENERAL_SPORT.CUSTOMER_SPORT_DETAILS_DATA('CS00'||P_CUSTOMER_SPORT_ID); 
        L_INVOICE_DETAILS.INVOICE_CODE :=  'IN00'||P_INVOICE_ID;
        L_PROMOTION := GENERAL_SPORT.FIND_PROMOTION(P_CUSTOMER_ID);
        SELECT SPORT_ID
        INTO L_SPORT_ID
        FROM SPORT
        WHERE SPORT_NAME = L_INVOICE.SPORT_NAME_ONE;
        L_CHARGE := GENERAL_SPORT.CHARGE_DATA(L_SPORT_ID);
        IF L_INVOICE.MONTH_COUNT_ONE < 12 
        THEN 
                L_INVOICE_DETAILS.COST_SPORT_ONE:= L_CHARGE.CHARGE_MONTH * L_INVOICE.MONTH_COUNT_ONE;
        ELSE 
                L_INVOICE_DETAILS.COST_SPORT_ONE:= L_CHARGE.CHARGE_YEAR * L_INVOICE.MONTH_COUNT_ONE/12;
        END IF;
        
        L_INVOICE_DETAILS.PROMO_CREATING_DATE  := L_CUSTOMER_SPORT_DETAILS.STARTING_DATE_ONE;
        L_INVOICE_DETAILS.PROMO_STARTING_DATE  := L_CUSTOMER_SPORT_DETAILS.STARTING_DATE_ONE;
        L_INVOICE_DETAILS.PROMO_ENDING_DATE    := L_CUSTOMER_SPORT_DETAILS.ENDING_DATE_ONE;
        L_INVOICE_DETAILS.PROMO_DISCOUNT_PERCENTAGE := L_PROMOTION.DISCOUNT_PERCENTAGE;
        L_INVOICE_DETAILS.EXPLAIN_INVOICE :=  'STARTING DATE: '||L_CUSTOMER_SPORT_DETAILS.STARTING_DATE_ONE||', '
        ||'ENDING DATE: '||L_CUSTOMER_SPORT_DETAILS.ENDING_DATE_ONE;
        IF L_INVOICE.SPORT_NAME_TWO IS NOT NULL --IF THERE TWO SPORT
        THEN 
                SELECT SPORT_ID
                INTO L_SPORT_ID
                FROM SPORT
                WHERE SPORT_NAME = L_INVOICE.SPORT_NAME_TWO;
                L_CHARGE := GENERAL_SPORT.CHARGE_DATA(L_SPORT_ID);
                IF L_INVOICE.MONTH_COUNT_TWO < 12 
                THEN 
                        L_INVOICE_DETAILS.COST_SPORT_TWO:= L_CHARGE.CHARGE_MONTH * L_INVOICE.MONTH_COUNT_TWO;
                ELSE 
                        L_INVOICE_DETAILS.COST_SPORT_TWO:= L_CHARGE.CHARGE_YEAR * L_INVOICE.MONTH_COUNT_TWO/12;
                END IF;
            
                L_INVOICE_DETAILS.EXPLAIN_INVOICE :=  'STARTING DATE FOR SPORT ONE: '||L_CUSTOMER_SPORT_DETAILS.STARTING_DATE_ONE||' AND '
                ||'ENDING DATE FOR SPORT ONE '||L_CUSTOMER_SPORT_DETAILS.ENDING_DATE_ONE||', '
                ||'STARTING DATE FOR SPORT TWO '||L_CUSTOMER_SPORT_DETAILS.STARTING_DATE_TWO||' AND '
                ||'ENDING DATE FOR SPORT TWO '||L_CUSTOMER_SPORT_DETAILS.ENDING_DATE_TWO;  
        END IF; 
        
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'INVOICE_DETAILS', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, INVOICE_ID, BY_USER)
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'COMPUTE_INVOICE_DETAILS FUNCTION', SYSDATE, P_INVOICE_ID, USER);
 
        RETURN L_INVOICE_DETAILS;
        
    EXCEPTION
        WHEN OTHERS THEN 
                L_ERROR_CODE   := SQLCODE;
                L_ERROR_DETAILS := SQLERRM;
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'INVOICE_DETAILS', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, INVOICE_ID, ERROR_CODE, ERROR_DETAILS, BY_USER)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'COMPUTE_INVOICE_DETAILS FUNCTION', SYSDATE, P_INVOICE_ID, L_ERROR_CODE, L_ERROR_DETAILS, USER);
                RETURN NULL;
    
    END; 
    
    PROCEDURE CHECK_LAST_CHARGE_DATE
    AS 
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
        L_CUSTOMER_SPORT_COUNT    NUMBER;
        L_CUSTOMER_SPORT_DETAILS  CUSTOMER_SPORT_DETAILS % ROWTYPE;
    BEGIN 
        SELECT COUNT(*)
        INTO L_CUSTOMER_SPORT_COUNT
        FROM CUSTOMER_SPORT;
        
        FOR I IN 1..L_CUSTOMER_SPORT_COUNT LOOP  
                L_CUSTOMER_SPORT_DETAILS := GENERAL_SPORT.CUSTOMER_SPORT_DETAILS_DATA('CS00' || I);
                CASE
                WHEN L_CUSTOMER_SPORT_DETAILS.LAST_CHARGE_DATE_ONE = SYSDATE AND L_CUSTOMER_SPORT_DETAILS.LAST_CHARGE_DATE_TWO = SYSDATE
                THEN 
                    DBMS_OUTPUT.PUT_LINE('CUSTOMER NUMBER :' ||I || ', LAST CHARGE DATE IS TODAY FOR FIRST AND SECOND SPORT');
                    
                WHEN L_CUSTOMER_SPORT_DETAILS.LAST_CHARGE_DATE_ONE = SYSDATE
                THEN 
                    DBMS_OUTPUT.PUT_LINE('CUSTOMER NUMBER :' ||I || ', LAST CHARGE DATE IS TODAY FOR FIRST SPORT');
                    
                WHEN L_CUSTOMER_SPORT_DETAILS.LAST_CHARGE_DATE_TWO = SYSDATE
                THEN 
                    DBMS_OUTPUT.PUT_LINE('CUSTOMER NUMBER :' ||I || ', LAST CHARGE DATE IS TODAY FOR SECOND SPORT');

                ELSE 
                    DBMS_OUTPUT.PUT_LINE('CUSTOMER NUMBER :' ||I || ', LAST CHARGE DATE IS NOT TODAY FOR FIRST AND SECOND SPORT');
                END CASE;
        END LOOP;
        
    EXCEPTION
        WHEN OTHERS THEN 
                L_ERROR_CODE   := SQLCODE;
                L_ERROR_DETAILS := SQLERRM;
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_SPORT_DETAILS', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, ERROR_CODE, ERROR_DETAILS, BY_USER, CUSTOMER_SPORT_ID)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'CHECK_LAST_CHARGE_DATE RPOCEDURE', SYSDATE, L_ERROR_CODE, L_ERROR_DETAILS, USER, SUBSTR(L_CUSTOMER_SPORT_DETAILS.CUSTOMER_SPORT_CODE, 5));
    END;
       
    PROCEDURE UPDATE_SEQ_OR_ENTER (P_CUSTOMER_SPORT_ID    NUMBER,
                                   P_CUSTOMER_NAME        VARCHAR2,
                                   P_SPORT_NAME_ONE       VARCHAR2,
                                   P_COACH_NAME_ONE       VARCHAR2,
                                   P_SPORT_NAME_TWO       VARCHAR2,
                                   P_COACH_NAME_TWO       VARCHAR2,
                                   P_IF_INVALID           VARCHAR2)
    AS 
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
    BEGIN 
        IF P_SPORT_NAME_TWO IS NOT NULL 
        THEN
                INSERT INTO TEMP_CUSTOMER_SPORT
                VALUES (P_CUSTOMER_SPORT_ID, P_CUSTOMER_NAME, P_SPORT_NAME_ONE, P_COACH_NAME_ONE, P_SPORT_NAME_TWO, P_COACH_NAME_TWO, P_IF_INVALID, 1);
                MERGE INTO CUSTOMER_SPORT X
                USING (SELECT CUSTOMER_NAME, SPORT_NAME_ONE, COACH_NAME_ONE, SPORT_NAME_TWO, COACH_NAME_TWO, IF_INVALID  FROM TEMP_CUSTOMER_SPORT) Y
                    ON (X.CUSTOMER_NAME = Y.CUSTOMER_NAME)
                WHEN MATCHED THEN
                    UPDATE SET X.SEQ_CUS_SPO = X.SEQ_CUS_SPO + 1
                    WHERE X.CUSTOMER_NAME = Y.CUSTOMER_NAME AND X.SPORT_NAME_ONE = Y.SPORT_NAME_ONE AND X.COACH_NAME_ONE = Y.COACH_NAME_ONE
                        AND X.SPORT_NAME_TWO = Y.SPORT_NAME_TWO AND X.COACH_NAME_TWO = Y.COACH_NAME_TWO AND X.IF_INVALID = Y.IF_INVALID
                WHEN NOT MATCHED THEN
                    INSERT (X.CUSTOMER_SPORT_ID, X.CUSTOMER_NAME, X.SPORT_NAME_ONE, X.COACH_NAME_ONE, X.SPORT_NAME_TWO, X.COACH_NAME_TWO, X.IF_INVALID)
                    VALUES (P_CUSTOMER_SPORT_ID, Y.CUSTOMER_NAME, Y.SPORT_NAME_ONE, Y.COACH_NAME_ONE, Y.SPORT_NAME_TWO, Y.COACH_NAME_TWO, Y.IF_INVALID);
        ELSE 
                INSERT INTO TEMP_CUSTOMER_SPORT(CUSTOMER_SPORT_ID, CUSTOMER_NAME, SPORT_NAME_ONE, COACH_NAME_ONE, IF_INVALID, SEQ_CUS_SPO)
                VALUES (P_CUSTOMER_SPORT_ID, P_CUSTOMER_NAME, P_SPORT_NAME_ONE, P_COACH_NAME_ONE, P_IF_INVALID, 1);
                MERGE INTO CUSTOMER_SPORT X
                USING (SELECT CUSTOMER_NAME, SPORT_NAME_ONE, COACH_NAME_ONE, IF_INVALID  FROM TEMP_CUSTOMER_SPORT) Y
                    ON (X.CUSTOMER_NAME = Y.CUSTOMER_NAME)
                WHEN MATCHED THEN
                    UPDATE SET X.SEQ_CUS_SPO = X.SEQ_CUS_SPO + 1
                    WHERE X.CUSTOMER_NAME = Y.CUSTOMER_NAME AND X.SPORT_NAME_ONE = Y.SPORT_NAME_ONE AND X.COACH_NAME_ONE = Y.COACH_NAME_ONE
                         AND X.IF_INVALID = Y.IF_INVALID
                WHEN NOT MATCHED THEN
                    INSERT (X.CUSTOMER_SPORT_ID, X.CUSTOMER_NAME, X.SPORT_NAME_ONE, X.COACH_NAME_ONE, X.IF_INVALID)
                    VALUES (P_CUSTOMER_SPORT_ID, Y.CUSTOMER_NAME, Y.SPORT_NAME_ONE, Y.COACH_NAME_ONE, Y.IF_INVALID);
        END IF;
        DELETE FROM TEMP_CUSTOMER_SPORT;
        
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_SPORT', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, BY_USER, CUSTOMER_SPORT_ID )
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'UPDATE SEQUENCE OR ENTER DATA PROCEDURE', SYSDATE, USER, P_CUSTOMER_SPORT_ID );
 
    EXCEPTION
        WHEN OTHERS THEN 
                L_ERROR_CODE   := SQLCODE;
                L_ERROR_DETAILS := SQLERRM;
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'CUSTOMER_SPORT', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, ERROR_CODE, ERROR_DETAILS, BY_USER, CUSTOMER_SPORT_ID)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'UPDATE SEQUENCE OR ENTER DATA PROCEDURE', SYSDATE, L_ERROR_CODE, L_ERROR_DETAILS, USER, P_CUSTOMER_SPORT_ID);
     END; 
        
     FUNCTION COMPUTE_REFUND_INVOICE(P_INVOICE_ID              NUMBER,
                                     P_CANCEL_REGISTRATION_ONE DATE,
                                     P_CANCEL_REGISTRATION_TWO DATE)
    RETURN REFUND_INVOICE % ROWTYPE
    AS 
        L_ERROR_CODE    NUMBER;
        L_ERROR_DETAILS VARCHAR2(100);
        L_PER_ONE_MONTH_ONE  NUMBER;
        L_ENDING_DATE_TWO    DATE;
        L_ENDING_DATE_ONE    DATE;
        MONTHS_COUNT_ONE     NUMBER;
        MONTHS_COUNT_TWO     NUMBER;
        L_PER_ONE_MONTH_TWO  NUMBER;
        L_REFUND_INVOICE     REFUND_INVOICE % ROWTYPE DEFAULT NULL;
        L_INVOICE            INVOICE % ROWTYPE;
        L_INVOICE_DETAILS    INVOICE_DETAILS % ROWTYPE;
    BEGIN 
        L_INVOICE                                := GENERAL_SPORT.INVOICE_DATA(P_INVOICE_ID);
        L_INVOICE_DETAILS                        := GENERAL_SPORT.INVOICE_DETAILS_DATA('IN00'||P_INVOICE_ID);
        L_REFUND_INVOICE.CUSTOMER_NAME           := L_INVOICE.CUSTOMER_NAME;
        L_REFUND_INVOICE.CANCEL_REGISTRATION_ONE := P_CANCEL_REGISTRATION_ONE;
        L_REFUND_INVOICE.CANCEL_REGISTRATION_TWO := P_CANCEL_REGISTRATION_TWO;
        L_REFUND_INVOICE.INVOICE_ID              := L_INVOICE.INVOICE_ID; 
        
        IF L_INVOICE.SPORT_NAME_TWO IS NULL 
        THEN 
            L_ENDING_DATE_ONE              := TO_DATE(SUBSTR(L_INVOICE_DETAILS.EXPLAIN_INVOICE, 40, 9));
            MONTHS_COUNT_ONE               := MONTHS_BETWEEN(L_ENDING_DATE_ONE, L_REFUND_INVOICE.CANCEL_REGISTRATION_ONE);
            L_PER_ONE_MONTH_ONE            := (L_INVOICE_DETAILS.COST_SPORT_ONE - (L_INVOICE_DETAILS.COST_SPORT_ONE * L_INVOICE_DETAILS.PROMO_DISCOUNT_PERCENTAGE)) / L_INVOICE.MONTH_COUNT_ONE;
            L_REFUND_INVOICE.REFUND_ONE    :=  L_PER_ONE_MONTH_ONE * MONTHS_COUNT_ONE;
            L_REFUND_INVOICE.REFUND_TOTAL  :=  L_REFUND_INVOICE.REFUND_ONE;
        ELSE 
            L_ENDING_DATE_ONE              := TO_DATE(SUBSTR(L_INVOICE_DETAILS.EXPLAIN_INVOICE, 70, 9));
            L_ENDING_DATE_TWO              := TO_DATE(SUBSTR(L_INVOICE_DETAILS.EXPLAIN_INVOICE, 149, 9));
            MONTHS_COUNT_ONE               := MONTHS_BETWEEN(L_ENDING_DATE_ONE, L_REFUND_INVOICE.CANCEL_REGISTRATION_ONE);
            MONTHS_COUNT_TWO               := MONTHS_BETWEEN(L_ENDING_DATE_TWO, L_REFUND_INVOICE.CANCEL_REGISTRATION_TWO);
            L_PER_ONE_MONTH_ONE            := (L_INVOICE_DETAILS.COST_SPORT_ONE - (L_INVOICE_DETAILS.COST_SPORT_ONE * L_INVOICE_DETAILS.PROMO_DISCOUNT_PERCENTAGE)) / L_INVOICE.MONTH_COUNT_ONE;
            L_PER_ONE_MONTH_TWO            := (L_INVOICE_DETAILS.COST_SPORT_TWO - (L_INVOICE_DETAILS.COST_SPORT_TWO * L_INVOICE_DETAILS.PROMO_DISCOUNT_PERCENTAGE)) / L_INVOICE.MONTH_COUNT_TWO;
            L_REFUND_INVOICE.REFUND_ONE    :=L_PER_ONE_MONTH_ONE * MONTHS_COUNT_ONE;
            L_REFUND_INVOICE.REFUND_TWO    :=L_PER_ONE_MONTH_TWO * MONTHS_COUNT_TWO;
            L_REFUND_INVOICE.REFUND_TOTAL  := L_REFUND_INVOICE.REFUND_ONE + L_REFUND_INVOICE.REFUND_TWO;
        END IF;
        
        INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
        VALUES         (LOG_SEQ.NEXTVAL, 'REFUND_INVOICE', 'TRUE');
                    
        INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, BY_USER, REFUND_INVOICE_ID )
        VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'COMPUTE_REFUND_INVOICE FUNCTION', SYSDATE, USER, L_REFUND_INVOICE.REFUND_ID);
 
        RETURN L_REFUND_INVOICE;
        
    EXCEPTION
        WHEN OTHERS THEN 
                L_ERROR_CODE   := SQLCODE;
                L_ERROR_DETAILS := SQLERRM;
                INSERT INTO LOG(LOG_ID, TABLE_NAME, IF_SUCCESSFUL)--LOG TABLE 
                VALUES         (LOG_SEQ.NEXTVAL, 'REFUND_INVOICE', 'FALSE');
                    
                INSERT INTO LOG_DETAILS(LOG_CODE, OPERATION_NAME, OPERATION_DATE, ERROR_CODE, ERROR_DETAILS, BY_USER, REFUND_INVOICE_ID)
                VALUES                 ('LOG_'||LOG_SEQ.CURRVAL, 'COMPUTE_REFUND_INVOICE FUNCTION', SYSDATE, L_ERROR_CODE, L_ERROR_DETAILS, USER, L_REFUND_INVOICE.REFUND_ID);
    
        RETURN NULL;
    END;
                                                                                                               
END;


SELECT * FROM  PROMOTION;
SELECT * FROM  CUSTOMER;
SELECT * FROM  CUSTOMER_SPORT;
SELECT * FROM  CUSTOMER_SPORT_DETAILS;
SELECT * FROM  INVOICE;
SELECT * FROM  INVOICE_DETAILS;
SELECT * FROM  CHARGE;
SELECT * FROM  PROMOTION;
SELECT * FROM  SPORT;
SELECT * FROM  CHARGE;

